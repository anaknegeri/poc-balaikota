services:
  postgres:
    image: timescale/timescaledb:latest-pg17
    container_name: postgres
    restart: always
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      # TimescaleDB specific configurations
      TIMESCALEDB_TELEMETRY: "off"
      # Performance tuning
      POSTGRES_INITDB_ARGS: "--data-checksums"
      TIMESCALEDB_TUNE_MAX_CONNECTIONS: "200"
      TIMESCALEDB_TUNE_MAX_BACKGROUND_WORKERS: "8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./db/init.sh:/docker-entrypoint-initdb.d/init.sh
    networks:
      - ai_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  api-service:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: api-service
    ports:
      - "${SERVER_PORT:-3001}:3002"
    env_file:
      - .env
    volumes:
      - ./data:/app/data
    environment:
      - SERVER_PORT=${SERVER_PORT}
      - DATABASE_URL=${DATABASE_URL}
    networks:
      - ai_network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:${SERVER_PORT:-3001}/api/health",
        ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_BASE_URL=${VITE_API_BASE_URL}
    container_name: frontend
    env_file:
      - .env
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    networks:
      - ai_network

volumes:
  postgres_data:

networks:
  ai_network:
    driver: bridge
