/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as pagesRouteRouteImport } from './routes/(pages)/route'
import { Route as pagesIndexRouteImport } from './routes/(pages)/index'
import { Route as pagesCamerasRouteImport } from './routes/(pages)/cameras'
import { Route as pagesAlertsRouteImport } from './routes/(pages)/alerts'
import { Route as errors503RouteImport } from './routes/(errors)/503'
import { Route as errors500RouteImport } from './routes/(errors)/500'
import { Route as errors404RouteImport } from './routes/(errors)/404'
import { Route as errors403RouteImport } from './routes/(errors)/403'
import { Route as errors401RouteImport } from './routes/(errors)/401'

const pagesRouteRoute = pagesRouteRouteImport.update({
  id: '/(pages)',
  getParentRoute: () => rootRouteImport,
} as any)
const pagesIndexRoute = pagesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => pagesRouteRoute,
} as any)
const pagesCamerasRoute = pagesCamerasRouteImport.update({
  id: '/cameras',
  path: '/cameras',
  getParentRoute: () => pagesRouteRoute,
} as any)
const pagesAlertsRoute = pagesAlertsRouteImport.update({
  id: '/alerts',
  path: '/alerts',
  getParentRoute: () => pagesRouteRoute,
} as any)
const errors503Route = errors503RouteImport.update({
  id: '/(errors)/503',
  path: '/503',
  getParentRoute: () => rootRouteImport,
} as any)
const errors500Route = errors500RouteImport.update({
  id: '/(errors)/500',
  path: '/500',
  getParentRoute: () => rootRouteImport,
} as any)
const errors404Route = errors404RouteImport.update({
  id: '/(errors)/404',
  path: '/404',
  getParentRoute: () => rootRouteImport,
} as any)
const errors403Route = errors403RouteImport.update({
  id: '/(errors)/403',
  path: '/403',
  getParentRoute: () => rootRouteImport,
} as any)
const errors401Route = errors401RouteImport.update({
  id: '/(errors)/401',
  path: '/401',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof pagesIndexRoute
  '/401': typeof errors401Route
  '/403': typeof errors403Route
  '/404': typeof errors404Route
  '/500': typeof errors500Route
  '/503': typeof errors503Route
  '/alerts': typeof pagesAlertsRoute
  '/cameras': typeof pagesCamerasRoute
}
export interface FileRoutesByTo {
  '/401': typeof errors401Route
  '/403': typeof errors403Route
  '/404': typeof errors404Route
  '/500': typeof errors500Route
  '/503': typeof errors503Route
  '/alerts': typeof pagesAlertsRoute
  '/cameras': typeof pagesCamerasRoute
  '/': typeof pagesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(pages)': typeof pagesRouteRouteWithChildren
  '/(errors)/401': typeof errors401Route
  '/(errors)/403': typeof errors403Route
  '/(errors)/404': typeof errors404Route
  '/(errors)/500': typeof errors500Route
  '/(errors)/503': typeof errors503Route
  '/(pages)/alerts': typeof pagesAlertsRoute
  '/(pages)/cameras': typeof pagesCamerasRoute
  '/(pages)/': typeof pagesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/401'
    | '/403'
    | '/404'
    | '/500'
    | '/503'
    | '/alerts'
    | '/cameras'
  fileRoutesByTo: FileRoutesByTo
  to: '/401' | '/403' | '/404' | '/500' | '/503' | '/alerts' | '/cameras' | '/'
  id:
    | '__root__'
    | '/(pages)'
    | '/(errors)/401'
    | '/(errors)/403'
    | '/(errors)/404'
    | '/(errors)/500'
    | '/(errors)/503'
    | '/(pages)/alerts'
    | '/(pages)/cameras'
    | '/(pages)/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  pagesRouteRoute: typeof pagesRouteRouteWithChildren
  errors401Route: typeof errors401Route
  errors403Route: typeof errors403Route
  errors404Route: typeof errors404Route
  errors500Route: typeof errors500Route
  errors503Route: typeof errors503Route
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(pages)': {
      id: '/(pages)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof pagesRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(pages)/': {
      id: '/(pages)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof pagesIndexRouteImport
      parentRoute: typeof pagesRouteRoute
    }
    '/(pages)/cameras': {
      id: '/(pages)/cameras'
      path: '/cameras'
      fullPath: '/cameras'
      preLoaderRoute: typeof pagesCamerasRouteImport
      parentRoute: typeof pagesRouteRoute
    }
    '/(pages)/alerts': {
      id: '/(pages)/alerts'
      path: '/alerts'
      fullPath: '/alerts'
      preLoaderRoute: typeof pagesAlertsRouteImport
      parentRoute: typeof pagesRouteRoute
    }
    '/(errors)/503': {
      id: '/(errors)/503'
      path: '/503'
      fullPath: '/503'
      preLoaderRoute: typeof errors503RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/500': {
      id: '/(errors)/500'
      path: '/500'
      fullPath: '/500'
      preLoaderRoute: typeof errors500RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/404': {
      id: '/(errors)/404'
      path: '/404'
      fullPath: '/404'
      preLoaderRoute: typeof errors404RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/403': {
      id: '/(errors)/403'
      path: '/403'
      fullPath: '/403'
      preLoaderRoute: typeof errors403RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/401': {
      id: '/(errors)/401'
      path: '/401'
      fullPath: '/401'
      preLoaderRoute: typeof errors401RouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface pagesRouteRouteChildren {
  pagesAlertsRoute: typeof pagesAlertsRoute
  pagesCamerasRoute: typeof pagesCamerasRoute
  pagesIndexRoute: typeof pagesIndexRoute
}

const pagesRouteRouteChildren: pagesRouteRouteChildren = {
  pagesAlertsRoute: pagesAlertsRoute,
  pagesCamerasRoute: pagesCamerasRoute,
  pagesIndexRoute: pagesIndexRoute,
}

const pagesRouteRouteWithChildren = pagesRouteRoute._addFileChildren(
  pagesRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  pagesRouteRoute: pagesRouteRouteWithChildren,
  errors401Route: errors401Route,
  errors403Route: errors403Route,
  errors404Route: errors404Route,
  errors500Route: errors500Route,
  errors503Route: errors503Route,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
